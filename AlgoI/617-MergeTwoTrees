/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root1
 * @param {TreeNode} root2
 * @return {TreeNode}
 */
var mergeTrees = function(root1, root2) {
    //we will need to traverse the nodes.
    let walkerA = root1;
    let walkerB = root2;
    
    //base cases.
    if(!walkerA) return root2;
    if(!walkerB ) return root1;
    if(!walkerA && !walkerB) return root1;
    
    //sum the new node;
        if(walkerB.val) walkerA.val += walkerB.val;
    //recurse left and right (dfs);
        walkerA.left = mergeTrees(walkerA.left, walkerB.left);
        walkerA.right = mergeTrees(walkerA.right, walkerB.right);
    //all changes were made to root1.
    return root1;
};
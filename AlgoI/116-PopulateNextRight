
/**
 * // Definition for a Node.
 * function Node(val, left, right, next) {
 *    this.val = val === undefined ? null : val;
*    this.left = left === undefined ? null : left;
 *    this.right = right === undefined ? null : right;
 *    this.next = next === undefined ? null : next;
 * };
 */

/**
 * @param {Node} root
 * @return {Node}
 */

// After reviewing other solutions.
var connect = function(root) {
    if(!root || ! root.left) return root;
    
    root.left.next = root.right;

    if(root.next){
        root.right.next = root.next.left;
    } else root.right.next = null;

    connect(root.left);
    connect(root.right);
    return root;
    
};

/**
 * // Definition for a Node.
 * function Node(val, left, right, next) {
 *    this.val = val === undefined ? null : val;
 *    this.left = left === undefined ? null : left;
 *    this.right = right === undefined ? null : right;
 *    this.next = next === undefined ? null : next;
 * };
 */

/**
 * @param {Node} root
 * @return {Node}
 */

// see: https://www.youtube.com/watch?v=U4hFQCa1Cq0
var connect = function(root, start = root ? root.val : null) {
    if(!root) return root;
    root.next = null;
    let current = root;
    let left = root.left || null;
    
    while(current && left){
        current.left.next = current.right;
        
        if(current.next){
            current.right.next = current.next.left;
        } else current.right.next = null;
        
        current = current.next;
        if(!current){
            current = left;
            left = current.left;
        }
    }
    return root;
    
};